parameters: 
  - name: projectName
    displayName: projectName
    type: string
    default: projectName 

steps:
- script: echo ${{ parameters.projectName }}
  displayName: 'Build project'


- task: DotNetCoreCLI@2
  displayName: Restore
  inputs:
    command: restore
    projects: 02.Services/${{ parameters.projectName }}/**/*.csproj

- task: DotNetCoreCLI@2
  displayName: Restore
  inputs:
    command: restore
    projects: 02.Services/GoalKeeper.MApi/**/*.csproj

- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    command: build
    arguments: '--no-restore --configuration release'
    workingDirectory: ./02.Services/GoalKeeper.MApi/GoalKeeper.MApi.WebApi

- task: DotNetCoreCLI@2
  displayName: Test
  inputs:
    command: test
    arguments: '--configuration release /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/'
    publishTestResults: true
    projects: 02.Services/GoalKeeper.MApi/**/*.UnitTests.csproj

# At present, the code coverage reporting functionality provided by this task is limited and it does not merge coverage data. 
# If you provide multiple files as input to the task, only the first match is considered. If you use multiple publish code 
# coverage tasks in the pipeline, the summary and report is shown for the last task. Any previously uploaded data is ignored.
# - task: Palmmedia.reportgenerator.reportgenerator-build-release-task.reportgenerator@1
#   displayName: 'Generate code coverage report'
#   inputs:
#     reports: '${{ parameters.SourceFolder }}/**/*coverage*.xml'
#     targetdir: '$(System.DefaultWorkingDirectory)/${{ parameters.ModuleName }}/coveragereport'

# - task: PublishCodeCoverageResults@1
#   displayName: 'Publish code coverage report'
#   inputs:
#     codeCoverageTool: 'Cobertura'
#     summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'
#     failIfCoverageEmpty: true

# - script: |
#     ls -a
#     echo $(Build.SourcesDirectory)
#     ls -a $(Build.SourcesDirectory)
#   displayName: debug

#   MSBuild
# - task: DotNetCoreCLI@2
#   displayName: Test
#   inputs:
#     command: test
#     projects: 02.Services/GoalKeeper.MApi/**/*.UnitTests.csproj
#     arguments: '--configuration release --collect "Code coverage"'

# - script: dotnet test 02.Services/GoalKeeper.MApi/**/*.UnitTests.csproj --logger trx --collect "Code coverage"  
# - task: PublishTestResults@2
#   inputs:
#     testRunner: VSTest
#     testResultsFiles: '**/*.trx'

# Publish projects to specified folder.
- task: DotNetCoreCLI@2
  displayName: 'dotnet publish'
  inputs:
    command: 'publish'
    publishWebProjects: false
    projects: 02.Services/GoalKeeper.MApi/GoalKeeper.MApi.WebApi/*.csproj
    arguments: '-o $(Build.ArtifactStagingDirectory)/Output'
    zipAfterPublish: true
    modifyOutputPath: true

# this code takes all the files in $(Build.ArtifactStagingDirectory) and uploads them as an artifact of your build.
- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
    artifactName: 'Service'
