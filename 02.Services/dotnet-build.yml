steps:
# - script: echo dotnet-build
#   displayName: 'Build project'

- task: DotNetCoreCLI@2
  displayName: Restore
  inputs:
    command: restore
    projects: 02.Services/GoalKeeper.MApi/**/*.csproj

- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    command: build
    arguments: '--no-restore --configuration release'
    workingDirectory: ./02.Services/GoalKeeper.MApi/GoalKeeper.MApi.WebApi

- task: DotNetCoreCLI@2
  displayName: Test
  inputs:
    command: test
    arguments: '--configuration release /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/'
    publishTestResults: true
    projects: 02.Services/GoalKeeper.MApi/**/*.UnitTests.csproj

# - task: Palmmedia.reportgenerator.reportgenerator-build-release-task.reportgenerator@1
#   displayName: 'Generate code coverage report'
#   inputs:
#     reports: '${{ parameters.SourceFolder }}/**/*coverage*.xml'
#     targetdir: '$(System.DefaultWorkingDirectory)/${{ parameters.ModuleName }}/coveragereport'

- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage report'
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'
    failIfCoverageEmpty: true

- script: |
    ls -a
    echo $(Build.SourcesDirectory)
    ls -a $(Build.SourcesDirectory)
  displayName: debug

#   MSBuild
# - task: DotNetCoreCLI@2
#   displayName: Test
#   inputs:
#     command: test
#     projects: 02.Services/GoalKeeper.MApi/**/*.UnitTests.csproj
#     arguments: '--configuration release --collect "Code coverage"'

# - script: dotnet test 02.Services/GoalKeeper.MApi/**/*.UnitTests.csproj --logger trx --collect "Code coverage"  
# - task: PublishTestResults@2
#   inputs:
#     testRunner: VSTest
#     testResultsFiles: '**/*.trx'
